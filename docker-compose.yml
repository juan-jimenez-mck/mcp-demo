# docker-compose.yml
version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: chaqi_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chaqi_db}
      POSTGRES_USER: ${POSTGRES_USER:-pg}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pg}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - chaqi_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-pg} -d ${POSTGRES_DB:-chaqi_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prisma Migration Service
  prisma-migrate:
    build:
      context: ./api
      dockerfile: Dockerfile.prisma
    container_name: chaqi_prisma_migrate
    restart: "no"
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pg}:${POSTGRES_PASSWORD:-pg}@postgres:5432/${POSTGRES_DB:-chaqi_db}
    networks:
      - chaqi_network
    depends_on:
      postgres:
        condition: service_healthy

  # MCP Server
  mcpserver:
    build:
      context: ./mcpserver
      dockerfile: Dockerfile
    container_name: commerce_mcpserver
    restart: unless-stopped
    ports:
      - "${MCPSERVER_PORT:-8080}:8080"
    environment:
      # App Configuration
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}

      # Server Configuration
      - HOST=${MCPSERVER_HOST:-0.0.0.0}
      - PORT=${MCPSERVER_PORT:-8080}
      - TRANSPORT=${MCPSERVER_TRANSPORT:-sse}

      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pg}:${POSTGRES_PASSWORD:-pg}@postgres:5432/${POSTGRES_DB:-chaqi_db}

      # Anthropic Configuration
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_SLIM_MODEL=${ANTHROPIC_SLIM_MODEL}
      - ANTHROPIC_MAX_TOKENS=${ANTHROPIC_MAX_TOKENS:-4000}
    networks:
      - chaqi_network
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrate:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NestJS API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: chaqi_api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      # App Configuration
      - NODE_ENV=${ENVIRONMENT:-production}
      - PORT=${API_PORT:-3000}

      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pg}:${POSTGRES_PASSWORD:-pg}@postgres:5432/${POSTGRES_DB:-chaqi_db}

      # MCP Server Configuration
      - MCPSERVER_URL=${MCPSERVER_URL:-http://mcpserver:${MCPSERVER_PORT:-8080}/sse}

      # AI Configuration (if needed)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL}
      - ANTHROPIC_SLIM_MODEL=${ANTHROPIC_SLIM_MODEL}
      - ANTHROPIC_MAX_TOKENS=${ANTHROPIC_MAX_TOKENS:-4000}
    networks:
      - chaqi_network
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrate:
        condition: service_completed_successfully
      mcpserver:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://api:3000/api}
        - NODE_ENV=${ENVIRONMENT:-production}
    container_name: chaqi_client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-80}:80"
    environment:
      # Runtime configuration for the client
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://api:3000/api}
    networks:
      - chaqi_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  chaqi_network:
    driver: bridge
