// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SALES_REP
  ACCOUNT_MANAGER
  TRADE_MARKETING
  FINANCE
  COLLECTIONS
  LOGISTICS
}

enum OrderStatus {
  DRAFT
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  INVOICED
}

enum PaymentStatus {
  UNPAID
  PAID
  CANCELLED
}

enum PromotionType {
  PERCENTAGE    
  FIXED_AMOUNT  
}

enum PromotionStatus {
  DRAFT         
  ACTIVE        
  COMPLETED     
}

enum EmailStatus {
  DRAFT
  SENT
}


enum AccountInsightType {
  PAYMENT_OVERDUE
  INVENTORY_LOW
  ORDER_PREDICTION 
  OTHER
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
}

enum ActionItemType {
  CALL
  VISIT
  FOLLOW_UP
}


model User {
  id Int @id @default(autoincrement())
  firstName String @map("first_name")
  lastName String @map("last_name")
  email String @unique 
  role Role 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  accounts Account[]
  orders Order[]
  territoryId Int? @map("territory_id")
  territory Territory? @relation(fields: [territoryId], references: [id])
  chatSessions ChatSession[]
  actionItems     ActionItem[] 
}

model Territory {
  id Int @id @default(autoincrement())
  name String
  description String?
  users User[]
  accounts Account[]
}


model Contact {
  id       Int       @id @default(autoincrement())
  name     String
  email    String
  phone    String?
  company  String?
  accounts Account[]
}

model Address {
  id       Int       @id @default(autoincrement())
  street   String
  city     String
  state    String
  zipCode  String @map("zip_code")
  country  String
  accounts Account[]
}

model Account {
  id               Int              @id @default(autoincrement())
  name             String
  description      String?
  industry         String?
  creditLimit     Float? @map("credit_limit")
  notes            String?
  createdAt       DateTime         @default(now()) @map("created_at")
  salesRepId     Int @map("sales_rep_id")
  contactId       Int @map("contact_id")
  addressId       Int @map("address_id")
  territoryId     Int @map("territory_id")
  salesRep        User         @relation(fields: [salesRepId], references: [id])
  contact          Contact          @relation(fields: [contactId], references: [id])
  address          Address          @relation(fields: [addressId], references: [id])
  orderingPattern OrderingPattern?
  orders           Order[]
  territory        Territory        @relation(fields: [territoryId], references: [id])
  insights         AccountInsight[]
  actionItems     ActionItem[]
}

model OrderingPattern {
  id                   Int     @id @default(autoincrement())
  frequency            String
  averageOrderValue  Float @map("average_order_value")
  preferredOrderDay  String? @map("preferred_order_day")
  seasonality          String? 
  accountId           Int     @unique @map("account_id")
  account              Account @relation(fields: [accountId], references: [id])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  subcategories Subcategory[]
  products      Product[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  categoryId Int @map("category_id")
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Product {
  id             Int         @id @default(autoincrement())
  sku            String      @unique
  name           String
  description    String?
  size           String?
  unit           String?
  price          Float
  currency       String      @default("USD")
  cost           Float?
  categoryId    Int @map("category_id")
  subcategoryId Int @map("subcategory_id")
  category       Category    @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
  orderItems    OrderItem[]
  promotions     Promotion[]
}

model Order {
  id              Int         @id @default(autoincrement())
  accountId      Int @map("account_id")
  salesRepId    Int @map("sales_rep_id")
  paymentStatus  PaymentStatus? @default(UNPAID) @map("payment_status")
  status          OrderStatus? @default(DRAFT)
  notes           String?
  collectionDate DateTime? @map("collection_date")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  account         Account     @relation(fields: [accountId], references: [id])
  salesRep       User    @relation(fields: [salesRepId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId   Int @map("order_id")
  productId Int @map("product_id")
  quantity   Int
  price      Float
  discount   Float? @default(0)
  total      Float
  promotionId Int? @map("promotion_id")
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
  promotion      Promotion? @relation(fields: [promotionId], references: [id]) 
}

model ChatSession {
  id Int @id @default(autoincrement())
  title String?
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  messages ChatMessage[]
}

model ChatMessage {
  id Int @id @default(autoincrement())
  content String
  role String
  sessionId Int @map("session_id")
  metadata String?
  context String?
  session ChatSession @relation(fields: [sessionId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Promotion {
  id                Int              @id @default(autoincrement())
  name              String
  description       String?
  type              PromotionType
  status            PromotionStatus  @default(DRAFT)
  discount          Float            // 20 (for 20%) or 5 (for $5)
  minQuantity      Int?    @map("min_quantity")         // For quantity requirements
  baseVolume       Int?    @map("base_volume")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  productId        Int @map("product_id")
  product           Product @relation(fields: [productId], references: [id])
  orderItems       OrderItem[]
}

model Email {
  id Int @id @default(autoincrement())
  subject String?
  body String?
  status EmailStatus @default(DRAFT)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}


model AccountInsight {
  id           Int     @id @default(autoincrement())
  accountId   Int @map("account_id")
  type         AccountInsightType
  priority     Priority
  title        String
  description  String
  confidence   Float
  value        Float?  // Dollar value of opportunity
  createdAt   DateTime @default(now()) @map("created_at")
  account      Account @relation(fields: [accountId], references: [id])
}

model ActionItem {
  id          Int      @id @default(autoincrement())
  userId     Int @map("user_id")
  accountId  Int? @map("account_id")
  type        ActionItemType
  priority    Priority
  title       String
  dueTime    DateTime? @map("due_time")
  completed   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  account     Account? @relation(fields: [accountId], references: [id])
}